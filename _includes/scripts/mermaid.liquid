{% if page.mermaid and page.mermaid.enabled %}
  {% assign mermaid_lib = site.third_party_libraries.mermaid %}
  {% assign mermaid_js_url = mermaid_lib.url.js | replace: '{{version}}', mermaid_lib.version %}
  <script
    defer
    src="{{ mermaid_js_url }}"
    integrity="{{ mermaid_lib.integrity.js }}"
    crossorigin="anonymous"
  ></script>
  {% if page.mermaid.zoomable %}
    {% assign d3 = site.third_party_libraries.d3 %}
    {% assign d3_js_url = d3.url.js | replace: '{{version}}', d3.version %}
    <script
      defer
      src="{{ d3_js_url }}"
      integrity="{{ d3.integrity.js }}"
      crossorigin="anonymous"
    ></script>
  {% endif %}
  <script>
    let mermaidTheme = determineComputedTheme();

    /* Create mermaid diagram as another node and hide the code block, appending the mermaid node after it
       this is done to enable retrieving the code again when changing theme between light/dark */
    document.addEventListener('readystatechange', () => {
      if (document.readyState === 'complete') {
        document.querySelectorAll('pre>code.language-mermaid').forEach((elem) => {
          const svgCode = elem.textContent;
          const backup = elem.parentElement;
          backup.classList.add('unloaded');
          /* create mermaid node */
          let mermaid = document.createElement('pre');
          mermaid.classList.add('mermaid');
          const text = document.createTextNode(svgCode);
          mermaid.appendChild(text);
          backup.after(mermaid);
        });

        mermaid.initialize({ theme: mermaidTheme });

        /* Zoomable mermaid diagrams */
        if (typeof d3 !== 'undefined') {
          window.addEventListener('load', function () {
            var svgs = d3.selectAll('.mermaid svg');
            svgs.each(function () {
              var svg = d3.select(this);
              svg.html('<g>' + svg.html() + '</g>');
              var inner = svg.select('g');
              var zoom = d3.zoom().on('zoom', function (event) {
                inner.attr('transform', event.transform);
              });
              svg.call(zoom);
            });
          });
        }
      }
    });
  </script>
{% endif %}
