{% if site.enable_math and page.pseudocode %}
  <!-- MathJax -->
  <script type="text/javascript">
    window.MathJax = {
      tex: {
        inlineMath: [
          ['$', '$'],
          ['\\(', '\\)'],
        ],
        displayMath: [
          ['$$', '$$'],
          ['\\[', '\\]'],
        ],
        processEscapes: true,
        processEnvironments: true,
      },
    };
  </script>
  {% assign mathjax = site.third_party_libraries.mathjax %}
  {% assign mathjax_js_url = mathjax.url.js | replace: '{{version}}', mathjax.version %}
  <script
    type="text/javascript"
    id="MathJax-script"
    src="{{ mathjax_js_url }}"
    integrity="{{ mathjax.integrity.js }}"
    crossorigin="anonymous"
  ></script>
  {% assign pseudocode = site.third_party_libraries.pseudocode %}
  {% assign pseudocode_js_url = pseudocode.url.js | replace: '{{version}}', pseudocode.version %}
  <script
    type="text/javascript"
    src="{{ pseudocode_js_url }}"
    integrity="{{ pseudocode.integrity.js }}"
    crossorigin="anonymous"
  ></script>
  <script>
    document.addEventListener('readystatechange', () => {
      if (document.readyState === 'complete') {
        document.querySelectorAll('pre>code.language-pseudocode').forEach((elem) => {
          const texData = elem.textContent;
          const parent = elem.parentElement.parentElement;
          /* create pseudocode node */
          let pseudoCodeElement = document.createElement('pre');
          pseudoCodeElement.classList.add('pseudocode');
          const text = document.createTextNode(texData);
          pseudoCodeElement.appendChild(text);
          /* add pseudocode node and remove the original code block */
          parent.appendChild(pseudoCodeElement);
          parent.removeChild(elem.parentElement);
          /* embed the visualization in the container */
          pseudocode.renderElement(pseudoCodeElement);
        });
      }
    });
  </script>
{% endif %}
